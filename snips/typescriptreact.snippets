# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rpc "pureComponent" b
import * as React from 'react';

export class $1 extends React.PureComponent {
	render() {
		return($2);
	}
}
endsnippet

snippet rh "functionComponent" b
import * as React from 'react';

interface $2Props {

}

export const $1: React.FC<$3Props> = ({}) => {
	return($4);
}
endsnippet

snippet rhx "functionComponent" b
import React from 'react';

interface Props {

}

const $1: React.FC<> = ({}) => {
	return($3);
}

export default $2
endsnippet

snippet  rnss "reactNativeStyleSheet" b
import {StyleSheet} React from 'react-native';

const styles = StyleSheet.create({
	$1
})
endsnippet

snippet tog "toggleState" b
this.setState(state => ({$1}))
endsnippet

snippet cl "console.log" b
console.log($1);
endsnippet

snippet exd "export default" b
export default $1;
endsnippet

snippet cc "classnames" b
className={classnames($1)}
endsnippet

snippet imp "regular import" b
import $2 from '$1';
endsnippet

snippet ex "export default" b
export default $1;
endsnippet

snippet imd "destructured import" b
import { $2 } from '$1';
endsnippet

snippet apq "apolloQueryComponent" b
interface Props {
	children: (data: QueryResult<$4, OperationVariables>) => JSX.Element
}

export class $1 extends React.PureComponent {
	render() {
		return(
			<Query<$2> query={$3}>{x => this.props.children(x)}</Query>
		);
	}
}
endsnippet



