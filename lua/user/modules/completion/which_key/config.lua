return {
  keymaps = {
    defaults = {
      ["="] = "balance window",
      ["."] = "append period",
      [","] = "append comma",
      [";"] = "append semi-colon",
      ["["] = "replace in file",
      ["]"] = "replace in line",
      ["`"] = "wrap backticks",
      ["'"] = "wrap single quotes",
      ['"'] = "wrap double quotes",
      [")"] = "wrap parenthesis",
      ["}"] = "wrap curly braces",
      B = "highlight word",
      c = { ":bdelete<cr>", "close buffer" },
      x = { ":q<cr>", "Quit" },
      y = "yank",
      A = "select all",
      H = { ':h <C-R>=expand("<cword>")<cr><CR>', "help cword" },
      D = "close all",
      S = "edit snippet",
      U = "capitalize word",
      Y = "yank all",
      a = {
        name = "+Actions",
        [";"] = "open terminal",
        d = { ":bdelete!<cr>", "force delete buffer" },
        e = "turn off guides",
        f = {
          name = "+Fold",
          l = "under curosr",
          r = "recursive cursor",
          o = "open all",
          x = "close all",
        },
        F = { ":vertical resize 90<cr>", "vertical resize 90" },
        h = "horizontal split",
        l = "open last buffer",
        L = { ":vertical resize 40<cr>", "vertical resize 30%%" },
        n = "no highlight",
        o = "turn on guides",
        O = { ":<C-f>:resize 10<cr>", "open old commands" },
        R = "empty registers",
        v = "vertical split",
        x = { ":wq!<cr>", "save and exit" },
        s = { ":w!<cr>", "force save" },
        z = { ":q<cr>", "force exit" },
      },
      b = {
        name = "+Bufferline",
        c = "close all others",
        H = "close to left",
        x = "close all",
      },
      I = {
        name = "+Info",
        c = {
          ":e " .. require("user.utils").join_paths(rvim.get_user_dir(), "config/init.lua<cr>"),
          "open config/init.lua",
        },
        C = { ":checkhealth<cr>", "check health" },
        L = { ":LuaCacheProfile<cr>", "cache profile" },
        m = { ":messages<cr>", "messages" },
        M = "vim with me",
        v = {
          ":e " .. require("user.utils").join_paths(rvim.get_config_dir(), "init.lua"),
          "open vimrc",
        },
      },
      n = {
        name = "+New",
        f = "open file in same dir",
        s = "create new file in same dir",
      },
      w = {
        name = "+Orientation",
        h = "change to horizontal",
        v = "change to vertical",
      },
    },
  },
  telescope = {
    builtin = {
      name = "+Builtin",
      a = { ":Telescope autocommands<cr>", "autocmds" },
      b = { ":Telescope buffers<cr>", "buffers" },
      c = { ":Telescope commands<cr>", "commands" },
      e = { ":Telescope quickfix<cr>", "quickfix" },
      f = { ":Telescope builtin<cr>", "builtin" },
      h = { ":Telescope help_tags<cr>", "help" },
      H = { ":Telescope command_history<cr>", "history" },
      k = { ":Telescope keymaps<cr>", "keymaps" },
      l = { ":Telescope loclist<cr>", "loclist" },
      r = { ":Telescope registers<cr><CR>", "registers" },
      T = { ":Telescope treesitter", "treesitter" },
      v = { ":Telescope vim_options<cr>", "vim options" },
      z = { ":Telescope current_buffer_fuzzy_find<cr>", "current file fuzzy find" },
    },
    dotfiles = {
      name = "+Dotfiles",
      b = { ":Telescope dotfiles branches<cr>", "branches" },
      B = { ":Telescope dotfiles bcommits<cr>", "bcommits" },
      c = { ":Telescope dotfiles commits<cr>", "commits" },
      f = { ":Telescope dotfiles git_files<cr>", "git files" },
      s = { ":Telescope dotfiles status<cr>", "status" },
    },
    config = {
      name = "+Config",
      b = { ":Telescope nvim_files branches<cr>", "branches" },
      B = { ":Telescope nvim_files bcommits<cr>", "bcommits" },
      c = { ":Telescope nvim_files commits<cr>", "commits" },
      f = { ":Telescope nvim_files files<cr>", "nvim files" },
      g = { ":Telescope nvim_files grep_files<cr>", "grep files" },
      I = { ":Telescope nvim_files view_changelog<cr>", "view changelog" },
      s = { ":Telescope nvim_files status<cr>", "status" },
    },
    git = {
      name = "+Git",
      b = { ":Telescope git_branches<cr>", "branches" },
      c = { ":Telescope git_commits<cr>", "commits" },
      C = { ":Telescope git_bcommits<cr>", "bcommits" },
      f = { ":Telescope git_files<cr>", "files" },
      s = { ":Telescope git_status<cr>", "status" },
    },
    lsp = {
      name = "+Lsp",
      a = { ":Telescope lsp_code_actions<cr>", "code action" },
      A = { ":Telescope lsp_range_code_actions<cr>", "range code action" },
      r = { ":Telescope lsp_references<cr>", "references" },
      d = { ":Telescope lsp_document_symbols<cr>", "document_symbol" },
      w = { ":Telescope lsp_workspace_symbols<cr>", "workspace_symbol" },
    },
    extensions = {
      name = "+Extensions",
      b = { ":Telescope bg_selector<cr>", "change background" },
    },
    live = {
      name = "+Live",
      g = { ":Telescope live_grep<cr>", "grep" },
      w = { ":Telescope grep_string<cr>", "current word" },
      e = { ":Telescope grep_string_prompt<cr>", "prompt" },
    },
    files = {
      ":Telescope find_files<cr>",
      "find files",
    },
    oldfiles = { ":Telescope oldfiles<cr>", "recent files" },
    frecency = { ":Telescope frecency<cr>", "history" },
    browser = { ":Telescope file_browser<cr>", "file browser" },
    tmux = {
      name = "+Tmux",
      s = { ":Telescope tmux sessions<cr>", "sessions" },
      w = { ":Telescope tmux windows<cr>", "windows" },
      e = { ":Telescope tmux pane_contents<cr>", "pane contents" },
    },
  },
  lsp = {
    name = "+Lsp",
    d = { ":LspLog<cr>", "log" },
    i = { ":LspInfo<cr>", "info" },
    I = { ":LspInstallInfo<cr>", "installer info" },
    n = { ":NullLsInfo<cr>", "null-ls info" },
    N = { ":NlspBufConfig<cr>", "nlsp config" },
    p = {
      name = "+Peek",
    },
    L = "toggle locflist",
    s = { ":Telescope lsp_document_symbols<cr>", "document symbols" },
    S = { ":Telescope lsp_dynamic_workspace_symbols<cr>", "workspace symbols" },
    w = { ":LspDiagnostics<cr>", "set qflist" },
    W = "toggle qflist",
    x = "empty qflist",
  },
  kommentary = {
    ["/"] = { "<Plug>kommentary_line_default", "comment" },
    a = { ["/"] = { "<Plug>kommentary_motion_default", "comment motion default" } },
  },
  dap = {
    name = "+Debug",
    ["?"] = "centered float ui",
    a = "attach",
    A = "attach remote",
    b = "toggle breakpoint",
    B = "set breakpoint",
    c = "continue",
    C = "run to cursor",
    g = "get session",
    k = "up",
    L = "run last",
    n = "down",
    p = "pause",
    r = "toggle repl",
    R = "open repl in vsplit",
    s = {
      name = "+Step",
      b = "back",
      i = "step into",
      o = "step out",
      v = "step over",
    },
    S = { ':lua require"dap".close()', "stop" },
    x = { ':lua require"dap".disconnect()', "disconnect" },
  },
  dap_ui = {
    toggle = {
      ':lua require"dapui".toggle()',
      "toggle ui",
    },
    inspect = {
      ':lua require"dap.ui.variables".hover()',
      "inspect",
    },
  },
  packer = {
    name = "+Plug",
    c = { ":PlugCompile<cr>", "compile" },
    C = { ":PlugClean<cr>", "clean" },
    d = { ":PlugCompiledDelete<cr>", "delete packer_compiled" },
    u = { ":PlugUpdate<cr>", "update" },
    e = { ":PlugCompiledEdit<cr>", "edit packer_compiled" },
    i = { ":PlugInstall<cr>", "install" },
    r = { ":PlugRecompile<cr>", "recompile" },
    s = { ":PlugSync<cr>", "sync" },
    S = { ":PlugStatus<cr>", "Status" },
  },
  fterm = {
    name = "+Fterm",
    g = { [[v:lua.fterm_cmd("gitui")]], "gitui" },
    l = { [[v:lua.fterm_cmd("lazygit")]], "lazygit" },
    N = { [[v:lua.fterm_cmd("node")]], "node" },
    [";"] = "new",
    p = { [[v:lua.fterm_cmd("python")]], "python" },
    r = { [[v:lua.fterm_cmd("ranger")]], "ranger" },
    v = "open vimrc in vertical split",
  },
  far = {
    name = "+Far",
    f = { ":Farr --source=vimgrep<cr>", "replace in File" },
    d = { ":Fardo<cr>", "do" },
    i = { ":Farf<cr>", "search iteratively" },
    r = { ":Farr --source=rgnvim<cr>", "replace in Project" },
    z = { ":Farundo<cr>", "undo" },
  },
  gitsigns = {
    name = "+Gitsigns",
    b = "blame line",
    e = "preview hunk",
    r = "reset hunk",
    s = "stage hunk",
    t = "toggle line blame",
    u = "undo stage hunk",
  },
  fugitive = {
    name = "+Git",
    a = { ":Git fetch --all<cr>", "fetch all" },
    A = { ":Git blame<cr>", "blame" },
    b = { ":GBranches<cr>", "branches" },
    c = {
      name = "+Commit",
      a = { ":Git commit --amend -m <cr>", "amend" },
      m = { ":Git commit<cr><CR>", "message" },
    },
    C = { ":Git checkout -b <cr>", "checkout" },
    d = { ":Git diff<cr>", "diff" },
    D = { ":Gdiffsplit<cr>", "diff split" },
    h = { ":diffget //3<cr>", "diffget" },
    i = { ":Git init<cr>", "init" },
    k = { ":diffget //2<cr>", "diffget" },
    l = { ":Git log<cr>", "log" },
    e = { ":Git push<cr>", "push" },
    p = { ":Git poosh<cr>", "poosh" },
    P = { ":Git pull<cr>", "pull" },
    r = { ":GRemove<cr>", "remove" },
    s = { ":G<cr>", "status" },
  },
  trouble = {
    name = "+Trouble",
    d = { ":TroubleToggle lsp_document_diagnostics<cr>", "document" },
    e = { ":TroubleToggle quickfix<cr>", "quickfix" },
    l = { ":TroubleToggle loclist<cr>", "loclist" },
    r = { ":TroubleToggle lsp_references<cr>", "references" },
    w = { ":TroubleToggle lsp_workspace_diagnostics<cr>", "workspace" },
  },
  slide = {
    name = "+ASCII",
    A = "add 20 less than signs",
    b = "term",
    B = "bfraktur",
    e = "emboss",
    E = "emboss2",
    f = "bigascii12",
    F = "letter",
    m = "bigmono12",
    v = "asciidoc-view",
    w = "wideterm",
  },
  bookmarks = {
    name = "+Mark",
    e = { ":BookmarkToggle<cr>", "toggle" },
    b = { ":BookmarkPrev<cr>", "previous mark" },
    k = { ":BookmarkNext<cr>", "next mark" },
  },
  dashboard = {
    name = "+Session",
    l = { ":SessionLoad<cr>", "load Session" },
    s = { ":SessionSave<cr>", "save Session" },
  },
}
