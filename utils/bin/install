#!/bin/sh
#Set Variable to master is not set differently
BRANCH="${BRANCH:-main}"
set -o nounset # error when referencing undefined variable
set -o errexit # exit when command fails

RVIM_GIT_PATH="$HOME/.dots/rvim/"
RVIM_CONFIG_PATH="$HOME/.config/rvim/"

lsp_path='.cache/rvim/nvim_lsp'
neovim_py='.cache/rvim/venv/neovim'

asktoinstallgit() {
	echo "git not found, please install git"
	exit
}

asktoinstallgo() {
	echo "Please install go before continuing with install" && exit
}

asktoinstallnode() {
	echo "Please install node before continuing with install" && exit
}

asktoinstallpip() {
	echo "Please install pip3 before continuing with install" && exit
}

moveoldrvim() {
	echo "Not installing rvim"
	echo "Please remove $RVIM_CONFIG_PATH and $RVIM_GIT_PATH paths before installing"
	exit
}

installpacker() {
	git clone https://github.com/wbthomason/packer.nvim ~/.local/share/rvim/site/pack/packer/opt/packer.nvim
}

createDirs() {
	mkdir -p "$HOME/.dots"
	mkdir -p "$HOME/.cache/rvim"
	mkdir -p "$HOME/.cache/rvim/dap"
	mkdir -p "$HOME/.cache/rvim/shada"
	mkdir -p "$HOME/.cache/rvim/session"
	mkdir -p "$HOME/.cache/rvim/undodir"
	mkdir -p "$HOME/.cache/rvim/nvim_lsp"
	mkdir -p "$HOME/.cache/rvim/telescope"
	mkdir -p "$HOME/.local/share/rvim"
	mkdir -p "$HOME/$lsp_path"
}

pythonVenvInit() {
	mkdir -p ~/$neovim_py
	python3 -m venv ~/$neovim_py
	~/$neovim_py/bin/pip3 install -U setuptools pynvim jedi neovim-remote
}

pythonExtra() {
	pip3 install ueberzug isort yapf black flake8 pylint mypy black isort
}

golangInit() {
	go install github.com/mattn/efm-langserver
	go install golang.org/x/tools/gopls@latest
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.43.0
}

installExtra() {
	sudo pacman -S ripgrep fzf cppcheck stylua shfmt shellcheck
}

nodeExtra() {
	npm install -g tree-sitter-cli eslint prettier_d_slim esint_d
}

rconf() {
	/usr/bin/git --git-dir="$RVIM_GIT_PATH" --work-tree="$RVIM_CONFIG_PATH" "$@"
}

importRvim() {
	git clone --branch "$BRANCH" --bare https://github.com/razak17/nvim "$RVIM_GIT_PATH"
	mkdir -p "$RVIM_CONFIG_PATH"
	cd "$RVIM_CONFIG_PATH" || exit
	rconf checkout
	if [ $? = 0 ]; then
		echo "Checked out dotfiles..."
	else
		mkdir -p ~/.config-backup-rvim
		echo "Backing up pre-existing dot files."
		rconf checkout 2>&1 | grep -E "\s+\." | awk {'print $1'} | xargs -I{} mv {} ~/.config-backup-rvim/{}
	fi
	rconf checkout
	rconf config --local status.showUntrackedFiles no
	echo "Config clone done"
	echo "Old files have been moved to ~/.config-backup-rvim"
}

cloneconfig() {
	# check existing config
	[ -d "$RVIM_CONFIG_PATH" ] || [ -d "$RVIM_GIT_PATH" ] && moveoldrvim

	# install go
	(command -v go >/dev/null && echo "go installed, moving on...") || asktoinstallgo

	# install node and neovim support
	(command -v node >/dev/null && echo "node installed, moving on...") || asktoinstallnode

	# install pip
	(command -v pip3 >/dev/null && echo "pip installed, moving on...") || asktoinstallpip

	# create dirs
	echo "Creating default directories"
	createDirs

	# Cloning rvim configuration
	echo "Installing rvim"
	importRvim

	# Install core python packages
	echo "Installing core python packages"
	pythonVenvInit

	# install node and neovim support
	(command -v git >/dev/null && echo "git installed, moving on...") || asktoinstallgit

	if [ -e "$HOME/.local/share/rvim/site/pack/packer/opt/packer.nvim" ]; then
		echo 'packer already installed'
	else
		installpacker
	fi

	printf "Would you like to install node packages now (y/n)? "
	read -r answer
	[ "$answer" != "${answer#[Yy]}" ] && nodeExtra

	printf "Would you like to install pip packages now (y/n)? "
	read -r answer
	[ "$answer" != "${answer#[Yy]}" ] && pythonExtra

	printf "Would you like to install go packages now (y/n)? "
	read -r answer
	[ "$answer" != "${answer#[Yy]}" ] && golangInit

	printf "Would you like to install extra packages now (y/n)? "
	read -r answer
	[ "$answer" != "${answer#[Yy]}" ] && installExtra

	sudo cp --force "$HOME/.config/rvim/utils/bin/rvim" "$HOME/.local/bin"
}

while [ "$#" -gt 0 ]; do
	curr=$1
	shift

	case "$curr" in
	-py)
		pythonVenvInit
		;;
	-node)
		nodeHostInit
		;;
	-go)
		golangInit
		;;
	*--all*)
		cloneconfig
		;;
	*) echo "Unavailable command... $curr" ;;
	esac
done
