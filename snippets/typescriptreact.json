{
  "Log to the console with cl": {
    "prefix": "cl",
    "body": ["console.log($0);"],
    "description": "Log to the console"
  },
  "log": {
    "prefix": ["logg"],
    "body": "console.log(${1:$TM_SELECTED_TEXT});"
  },
  "Normal Import": {
    "prefix": "imm",
    "body": ["import $0 from \"${1:module}\";"],
    "description": "Imports normal package"
  },
  "Destructured Import": {
    "prefix": "imd",
    "body": ["import { $0 } from \"${1:module}\";"],
    "description": "Imports destructured package"
  },
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react';"],
    "description": "Imports React"
  },
  "Function Statement": {
    "prefix": "function",
    "body": ["function ${1:name}(${2:params}: ${3:string}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "const function Statement": {
    "prefix": "const",
    "body": ["const ${1:name} = (${2:params}: ${3:string}) => {", "\t$0", "}"],
    "description": "const function Statement"
  },
  "componentFunctionalTypescript": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  return <div />;",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};"
    ],
    "description": "Create ReactJS Functional Component Typescript"
  },
  "Create useState hook": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1:State}] = useState(${2:defaultState});"
    ],
    "description": "Creates React useState hook"
  },
  "Create useEffect hook": {
    "prefix": "useEffect",
    "body": ["useEffect(() => {", "\t", "}, []);"],
    "description": "Creates React useEffect hook"
  },
  "Create useContext hook": {
    "prefix": "useContext",
    "body": ["const ${1:value} = useContext(MyContext);"],
    "description": "Creates React useContext hook"
  },
  "Create useReducer hook": {
    "prefix": "useReducer",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, initialState);"
    ],
    "description": "Creates React useReducer hook"
  },
  "Create useCallback hook": {
    "prefix": "useCallback",
    "body": [
      "const ${1:memoizedCallback} = useCallback(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useCallback hook"
  },
  "Create useMemo hook": {
    "prefix": "useMemo",
    "body": ["const ${1:memoizedValue} = useMemo(() => {", "\t", "}, []);"],
    "description": "Creates React useMemo hook"
  },
  "Create useRef hook": {
    "prefix": "useRef",
    "body": ["const ${1:refContainer} = useRef(${2:initialValue});"],
    "description": "Creates React useRef hook"
  }
}
